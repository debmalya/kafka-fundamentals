/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.example;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class BookReview extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -4900773504636371277L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"BookReview\",\"namespace\":\"com.example\",\"fields\":[{\"name\":\"name\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"author\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"userRating\",\"type\":\"float\"},{\"name\":\"reviews\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"price\",\"type\":\"float\"},{\"name\":\"year\",\"type\":\"int\"},{\"name\":\"genre\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<BookReview> ENCODER =
      new BinaryMessageEncoder<BookReview>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<BookReview> DECODER =
      new BinaryMessageDecoder<BookReview>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<BookReview> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<BookReview> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<BookReview>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this BookReview to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a BookReview from a ByteBuffer. */
  public static BookReview fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private java.lang.String name;
   private java.lang.String author;
   private float userRating;
   private java.lang.String reviews;
   private float price;
   private int year;
   private java.lang.String genre;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public BookReview() {}

  /**
   * All-args constructor.
   * @param name The new value for name
   * @param author The new value for author
   * @param userRating The new value for userRating
   * @param reviews The new value for reviews
   * @param price The new value for price
   * @param year The new value for year
   * @param genre The new value for genre
   */
  public BookReview(java.lang.String name, java.lang.String author, java.lang.Float userRating, java.lang.String reviews, java.lang.Float price, java.lang.Integer year, java.lang.String genre) {
    this.name = name;
    this.author = author;
    this.userRating = userRating;
    this.reviews = reviews;
    this.price = price;
    this.year = year;
    this.genre = genre;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return name;
    case 1: return author;
    case 2: return userRating;
    case 3: return reviews;
    case 4: return price;
    case 5: return year;
    case 6: return genre;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: name = (java.lang.String)value$; break;
    case 1: author = (java.lang.String)value$; break;
    case 2: userRating = (java.lang.Float)value$; break;
    case 3: reviews = (java.lang.String)value$; break;
    case 4: price = (java.lang.Float)value$; break;
    case 5: year = (java.lang.Integer)value$; break;
    case 6: genre = (java.lang.String)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'name' field.
   * @return The value of the 'name' field.
   */
  public java.lang.String getName() {
    return name;
  }


  /**
   * Gets the value of the 'author' field.
   * @return The value of the 'author' field.
   */
  public java.lang.String getAuthor() {
    return author;
  }


  /**
   * Gets the value of the 'userRating' field.
   * @return The value of the 'userRating' field.
   */
  public java.lang.Float getUserRating() {
    return userRating;
  }


  /**
   * Gets the value of the 'reviews' field.
   * @return The value of the 'reviews' field.
   */
  public java.lang.String getReviews() {
    return reviews;
  }


  /**
   * Gets the value of the 'price' field.
   * @return The value of the 'price' field.
   */
  public java.lang.Float getPrice() {
    return price;
  }


  /**
   * Gets the value of the 'year' field.
   * @return The value of the 'year' field.
   */
  public java.lang.Integer getYear() {
    return year;
  }


  /**
   * Gets the value of the 'genre' field.
   * @return The value of the 'genre' field.
   */
  public java.lang.String getGenre() {
    return genre;
  }


  /**
   * Creates a new BookReview RecordBuilder.
   * @return A new BookReview RecordBuilder
   */
  public static com.example.BookReview.Builder newBuilder() {
    return new com.example.BookReview.Builder();
  }

  /**
   * Creates a new BookReview RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new BookReview RecordBuilder
   */
  public static com.example.BookReview.Builder newBuilder(com.example.BookReview.Builder other) {
    return new com.example.BookReview.Builder(other);
  }

  /**
   * Creates a new BookReview RecordBuilder by copying an existing BookReview instance.
   * @param other The existing instance to copy.
   * @return A new BookReview RecordBuilder
   */
  public static com.example.BookReview.Builder newBuilder(com.example.BookReview other) {
    return new com.example.BookReview.Builder(other);
  }

  /**
   * RecordBuilder for BookReview instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<BookReview>
    implements org.apache.avro.data.RecordBuilder<BookReview> {

    private java.lang.String name;
    private java.lang.String author;
    private float userRating;
    private java.lang.String reviews;
    private float price;
    private int year;
    private java.lang.String genre;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.example.BookReview.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.name)) {
        this.name = data().deepCopy(fields()[0].schema(), other.name);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.author)) {
        this.author = data().deepCopy(fields()[1].schema(), other.author);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.userRating)) {
        this.userRating = data().deepCopy(fields()[2].schema(), other.userRating);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.reviews)) {
        this.reviews = data().deepCopy(fields()[3].schema(), other.reviews);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.price)) {
        this.price = data().deepCopy(fields()[4].schema(), other.price);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.year)) {
        this.year = data().deepCopy(fields()[5].schema(), other.year);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.genre)) {
        this.genre = data().deepCopy(fields()[6].schema(), other.genre);
        fieldSetFlags()[6] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing BookReview instance
     * @param other The existing instance to copy.
     */
    private Builder(com.example.BookReview other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.name)) {
        this.name = data().deepCopy(fields()[0].schema(), other.name);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.author)) {
        this.author = data().deepCopy(fields()[1].schema(), other.author);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.userRating)) {
        this.userRating = data().deepCopy(fields()[2].schema(), other.userRating);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.reviews)) {
        this.reviews = data().deepCopy(fields()[3].schema(), other.reviews);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.price)) {
        this.price = data().deepCopy(fields()[4].schema(), other.price);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.year)) {
        this.year = data().deepCopy(fields()[5].schema(), other.year);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.genre)) {
        this.genre = data().deepCopy(fields()[6].schema(), other.genre);
        fieldSetFlags()[6] = true;
      }
    }

    /**
      * Gets the value of the 'name' field.
      * @return The value.
      */
    public java.lang.String getName() {
      return name;
    }

    /**
      * Sets the value of the 'name' field.
      * @param value The value of 'name'.
      * @return This builder.
      */
    public com.example.BookReview.Builder setName(java.lang.String value) {
      validate(fields()[0], value);
      this.name = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'name' field has been set.
      * @return True if the 'name' field has been set, false otherwise.
      */
    public boolean hasName() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'name' field.
      * @return This builder.
      */
    public com.example.BookReview.Builder clearName() {
      name = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'author' field.
      * @return The value.
      */
    public java.lang.String getAuthor() {
      return author;
    }

    /**
      * Sets the value of the 'author' field.
      * @param value The value of 'author'.
      * @return This builder.
      */
    public com.example.BookReview.Builder setAuthor(java.lang.String value) {
      validate(fields()[1], value);
      this.author = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'author' field has been set.
      * @return True if the 'author' field has been set, false otherwise.
      */
    public boolean hasAuthor() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'author' field.
      * @return This builder.
      */
    public com.example.BookReview.Builder clearAuthor() {
      author = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'userRating' field.
      * @return The value.
      */
    public java.lang.Float getUserRating() {
      return userRating;
    }

    /**
      * Sets the value of the 'userRating' field.
      * @param value The value of 'userRating'.
      * @return This builder.
      */
    public com.example.BookReview.Builder setUserRating(float value) {
      validate(fields()[2], value);
      this.userRating = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'userRating' field has been set.
      * @return True if the 'userRating' field has been set, false otherwise.
      */
    public boolean hasUserRating() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'userRating' field.
      * @return This builder.
      */
    public com.example.BookReview.Builder clearUserRating() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'reviews' field.
      * @return The value.
      */
    public java.lang.String getReviews() {
      return reviews;
    }

    /**
      * Sets the value of the 'reviews' field.
      * @param value The value of 'reviews'.
      * @return This builder.
      */
    public com.example.BookReview.Builder setReviews(java.lang.String value) {
      validate(fields()[3], value);
      this.reviews = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'reviews' field has been set.
      * @return True if the 'reviews' field has been set, false otherwise.
      */
    public boolean hasReviews() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'reviews' field.
      * @return This builder.
      */
    public com.example.BookReview.Builder clearReviews() {
      reviews = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'price' field.
      * @return The value.
      */
    public java.lang.Float getPrice() {
      return price;
    }

    /**
      * Sets the value of the 'price' field.
      * @param value The value of 'price'.
      * @return This builder.
      */
    public com.example.BookReview.Builder setPrice(float value) {
      validate(fields()[4], value);
      this.price = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'price' field has been set.
      * @return True if the 'price' field has been set, false otherwise.
      */
    public boolean hasPrice() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'price' field.
      * @return This builder.
      */
    public com.example.BookReview.Builder clearPrice() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'year' field.
      * @return The value.
      */
    public java.lang.Integer getYear() {
      return year;
    }

    /**
      * Sets the value of the 'year' field.
      * @param value The value of 'year'.
      * @return This builder.
      */
    public com.example.BookReview.Builder setYear(int value) {
      validate(fields()[5], value);
      this.year = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'year' field has been set.
      * @return True if the 'year' field has been set, false otherwise.
      */
    public boolean hasYear() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'year' field.
      * @return This builder.
      */
    public com.example.BookReview.Builder clearYear() {
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'genre' field.
      * @return The value.
      */
    public java.lang.String getGenre() {
      return genre;
    }

    /**
      * Sets the value of the 'genre' field.
      * @param value The value of 'genre'.
      * @return This builder.
      */
    public com.example.BookReview.Builder setGenre(java.lang.String value) {
      validate(fields()[6], value);
      this.genre = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'genre' field has been set.
      * @return True if the 'genre' field has been set, false otherwise.
      */
    public boolean hasGenre() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'genre' field.
      * @return This builder.
      */
    public com.example.BookReview.Builder clearGenre() {
      genre = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public BookReview build() {
      try {
        BookReview record = new BookReview();
        record.name = fieldSetFlags()[0] ? this.name : (java.lang.String) defaultValue(fields()[0]);
        record.author = fieldSetFlags()[1] ? this.author : (java.lang.String) defaultValue(fields()[1]);
        record.userRating = fieldSetFlags()[2] ? this.userRating : (java.lang.Float) defaultValue(fields()[2]);
        record.reviews = fieldSetFlags()[3] ? this.reviews : (java.lang.String) defaultValue(fields()[3]);
        record.price = fieldSetFlags()[4] ? this.price : (java.lang.Float) defaultValue(fields()[4]);
        record.year = fieldSetFlags()[5] ? this.year : (java.lang.Integer) defaultValue(fields()[5]);
        record.genre = fieldSetFlags()[6] ? this.genre : (java.lang.String) defaultValue(fields()[6]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<BookReview>
    WRITER$ = (org.apache.avro.io.DatumWriter<BookReview>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<BookReview>
    READER$ = (org.apache.avro.io.DatumReader<BookReview>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
